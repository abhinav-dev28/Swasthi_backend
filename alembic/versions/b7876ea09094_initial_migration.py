"""Initial migration

Revision ID: b7876ea09094
Revises: 
Create Date: 2025-05-31 22:58:12.559663

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b7876ea09094'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('File_fileId_key'), table_name='File')
    op.drop_index(op.f('File_fileId_key_userId_thumbnailId_idx'), table_name='File')
    op.drop_table('File')
    op.drop_index(op.f('Ingredient_ingredientId_key'), table_name='Ingredient')
    op.drop_index(op.f('Ingredient_name_ingredientId_idx'), table_name='Ingredient')
    op.drop_index(op.f('ingredient_tsvector_idx'), table_name='Ingredient', postgresql_using='gin')
    op.drop_table('Ingredient')
    op.drop_table('Device')
    op.drop_index(op.f('WeightTarget_targetId_key'), table_name='WeightTarget')
    op.drop_index(op.f('WeightTarget_userId_targetId_idx'), table_name='WeightTarget')
    op.drop_table('WeightTarget')
    op.drop_index(op.f('Account_email_key'), table_name='Account')
    op.drop_index(op.f('Account_uid_idx'), table_name='Account')
    op.drop_index(op.f('Account_uid_key'), table_name='Account')
    op.drop_table('Account')
    op.drop_index(op.f('FoodIngredient_foodId_ingredientId_idx'), table_name='FoodIngredient')
    op.drop_table('FoodIngredient')
    op.drop_table('MealPlanDetails')
    op.drop_index(op.f('MyMealPlan_userId_mealPlanId_idx'), table_name='MyMealPlan')
    op.drop_table('MyMealPlan')
    op.drop_index(op.f('Coach_coachId_key'), table_name='Coach')
    op.drop_table('Coach')
    op.drop_index(op.f('RecentIngredients_userId_ingredientId_idx'), table_name='RecentIngredients')
    op.drop_table('RecentIngredients')
    op.drop_table('Mood')
    op.drop_table('Notification')
    op.drop_index(op.f('Food_foodId_key'), table_name='Food')
    op.drop_index(op.f('Food_foodId_name_idx'), table_name='Food')
    op.drop_table('Food')
    op.drop_table('CoachCertification')
    op.drop_index(op.f('RecipeIngredients_id_key'), table_name='RecipeIngredients')
    op.drop_table('RecipeIngredients')
    op.drop_index(op.f('WorkoutGoalLog_goalId_idx'), table_name='WorkoutGoalLog')
    op.drop_table('WorkoutGoalLog')
    op.drop_table('Instructions')
    op.drop_index(op.f('Subscription_subscriptionId_key'), table_name='Subscription')
    op.drop_table('Subscription')
    op.drop_index(op.f('Meal_mealId_key'), table_name='Meal')
    op.drop_index(op.f('Meal_mealId_name_idx'), table_name='Meal')
    op.drop_table('Meal')
    op.drop_index(op.f('MealLog_userId_foodId_idx'), table_name='MealLog')
    op.drop_table('MealLog')
    op.drop_table('PlanMeal')
    op.drop_table('RecipeBookmark')
    op.drop_index(op.f('UserFood_userId_foodId_idx'), table_name='UserFood')
    op.drop_table('UserFood')
    op.drop_table('Reminder')
    op.drop_index(op.f('CalculatorLog_logId_key'), table_name='CalculatorLog')
    op.drop_index(op.f('CalculatorLog_userId_calculatorType_createdAt_idx'), table_name='CalculatorLog')
    op.drop_table('CalculatorLog')
    op.drop_index(op.f('Streak_userId_key'), table_name='Streak')
    op.drop_index(op.f('Streak_userId_lastLogin_idx'), table_name='Streak')
    op.drop_table('Streak')
    op.drop_index(op.f('LoginHistory_streakId_loginDate_idx'), table_name='LoginHistory')
    op.drop_table('LoginHistory')
    op.drop_index(op.f('Goal_userId_date_idx'), table_name='Goal')
    op.drop_index(op.f('Goal_userId_key'), table_name='Goal')
    op.drop_table('Goal')
    op.drop_index(op.f('WeightTargetLog_targetId_date_userId_idx'), table_name='WeightTargetLog')
    op.drop_table('WeightTargetLog')
    op.drop_index(op.f('Payments_mealPlanId_key'), table_name='Payments')
    op.drop_index(op.f('Payments_paymentId_key'), table_name='Payments')
    op.drop_index(op.f('Payments_subscriptionId_key'), table_name='Payments')
    op.drop_table('Payments')
    op.drop_index(op.f('_AccountToFile_B_index'), table_name='_AccountToFile')
    op.drop_table('_AccountToFile')
    op.drop_index(op.f('Allergies_userId_foodId_recipeId_ingredientId_idx'), table_name='Allergies')
    op.drop_table('Allergies')
    op.drop_index(op.f('Recipe_recipeId_key'), table_name='Recipe')
    op.drop_index(op.f('Recipe_title_recipeId_idx'), table_name='Recipe')
    op.drop_index(op.f('recipe_tsvector_idx'), table_name='Recipe', postgresql_using='gin')
    op.drop_table('Recipe')
    op.drop_table('Saved')
    op.drop_index(op.f('MealPlan_mealPlanId_category_name_idx'), table_name='MealPlan')
    op.drop_index(op.f('MealPlan_mealPlanId_key'), table_name='MealPlan')
    op.drop_table('MealPlan')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('MealPlan',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"MealPlan_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('mealPlanId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('durationType', postgresql.ENUM('Days', 'Weeks', 'Months', 'Years', name='DurationType'), server_default=sa.text('\'Days\'::"DurationType"'), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('price', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('aiGenerated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('imageId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('coachId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['coachId'], ['Coach.coachId'], name='MealPlan_coachId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['imageId'], ['File.fileId'], name='MealPlan_imageId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='MealPlan_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('MealPlan_mealPlanId_key'), 'MealPlan', ['mealPlanId'], unique=True)
    op.create_index(op.f('MealPlan_mealPlanId_category_name_idx'), 'MealPlan', ['mealPlanId', 'category', 'name'], unique=False)
    op.create_table('Saved',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('mealId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('foodId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['foodId'], ['Food.foodId'], name=op.f('Saved_foodId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ingredientId'], ['Ingredient.ingredientId'], name=op.f('Saved_ingredientId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['mealId'], ['Meal.mealId'], name=op.f('Saved_mealId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['recipeId'], ['Recipe.recipeId'], name=op.f('Saved_recipeId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Saved_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Saved_pkey'))
    )
    op.create_table('Recipe',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Recipe_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('servingCount', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('prepTime', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('cuisionType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dietType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tasteType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('direction', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('videoId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('imageId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('thumbnailId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isFree', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Approved', 'Rejected', 'Pending', 'Unknown', name='RecipeStatus'), server_default=sa.text('\'Approved\'::"RecipeStatus"'), autoincrement=False, nullable=False),
    sa.Column('foodType', postgresql.ENUM('Vegetarian', 'NonVegetarian', 'Unknown', name='FoodType'), server_default=sa.text('\'Unknown\'::"FoodType"'), autoincrement=False, nullable=False),
    sa.Column('coachId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('document_with_weights', postgresql.TSVECTOR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['coachId'], ['Coach.coachId'], name='Recipe_coachId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['imageId'], ['File.fileId'], name='Recipe_imageId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['thumbnailId'], ['File.fileId'], name='Recipe_thumbnailId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name='Recipe_userId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['videoId'], ['File.fileId'], name='Recipe_videoId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Recipe_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('recipe_tsvector_idx'), 'Recipe', ['document_with_weights'], unique=False, postgresql_using='gin')
    op.create_index(op.f('Recipe_title_recipeId_idx'), 'Recipe', ['title', 'recipeId'], unique=False)
    op.create_index(op.f('Recipe_recipeId_key'), 'Recipe', ['recipeId'], unique=True)
    op.create_table('Allergies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('allergyOn', postgresql.ENUM('Ingredient', 'Recipe', 'Food', 'Meal', 'Unknown', name='AllergyOn'), server_default=sa.text('\'Unknown\'::"AllergyOn"'), autoincrement=False, nullable=False),
    sa.Column('foodId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['foodId'], ['Food.foodId'], name=op.f('Allergies_foodId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ingredientId'], ['Ingredient.ingredientId'], name=op.f('Allergies_ingredientId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['recipeId'], ['Recipe.recipeId'], name=op.f('Allergies_recipeId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Allergies_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Allergies_pkey'))
    )
    op.create_index(op.f('Allergies_userId_foodId_recipeId_ingredientId_idx'), 'Allergies', ['userId', 'foodId', 'recipeId', 'ingredientId'], unique=False)
    op.create_table('_AccountToFile',
    sa.Column('A', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('B', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['A'], ['Account.id'], name=op.f('_AccountToFile_A_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['B'], ['File.id'], name=op.f('_AccountToFile_B_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('A', 'B', name=op.f('_AccountToFile_AB_pkey'))
    )
    op.create_index(op.f('_AccountToFile_B_index'), '_AccountToFile', ['B'], unique=False)
    op.create_table('Payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('paymentId', sa.VARCHAR(length=70), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('amount', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('purchaseType', postgresql.ENUM('Subscription', 'CoachBook', 'MealPlan', name='PurchaseType'), server_default=sa.text('\'Subscription\'::"PurchaseType"'), autoincrement=False, nullable=False),
    sa.Column('subscriptionId', sa.VARCHAR(length=70), autoincrement=False, nullable=True),
    sa.Column('mealPlanId', sa.VARCHAR(length=70), autoincrement=False, nullable=True),
    sa.Column('paymentMethod', postgresql.ENUM('PhonePeUpi', 'GooglePayUpi', 'OtherUpi', 'Card', 'GooglePlay', 'AppleStore', 'PaytmWallet', 'PhonePeWallet', 'PaypalWallet', 'Unknown', 'PayU', name='PaymentType'), server_default=sa.text('\'Unknown\'::"PaymentType"'), autoincrement=False, nullable=False),
    sa.Column('paymentStatus', postgresql.ENUM('Pending', 'Success', 'Failed', 'Unknown', name='PaymentStatus'), server_default=sa.text('\'Unknown\'::"PaymentStatus"'), autoincrement=False, nullable=False),
    sa.Column('transactionId', sa.VARCHAR(length=70), autoincrement=False, nullable=True),
    sa.Column('orderId', sa.VARCHAR(length=70), autoincrement=False, nullable=True),
    sa.Column('discount', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('paymentCurrency', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['mealPlanId'], ['MealPlan.mealPlanId'], name=op.f('Payments_mealPlanId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['subscriptionId'], ['Subscription.subscriptionId'], name=op.f('Payments_subscriptionId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Payments_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Payments_pkey'))
    )
    op.create_index(op.f('Payments_subscriptionId_key'), 'Payments', ['subscriptionId'], unique=True)
    op.create_index(op.f('Payments_paymentId_key'), 'Payments', ['paymentId'], unique=True)
    op.create_index(op.f('Payments_mealPlanId_key'), 'Payments', ['mealPlanId'], unique=True)
    op.create_table('WeightTargetLog',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('targetId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('weight', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('unit', postgresql.ENUM('Kgs', 'Lbs', 'Unknown', name='WeightType'), server_default=sa.text('\'Unknown\'::"WeightType"'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['targetId'], ['WeightTarget.targetId'], name=op.f('WeightTargetLog_targetId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('WeightTargetLog_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('WeightTargetLog_pkey'))
    )
    op.create_index(op.f('WeightTargetLog_targetId_date_userId_idx'), 'WeightTargetLog', ['targetId', 'date', 'userId'], unique=False)
    op.create_table('Goal',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Goal_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('waterForEveryDay', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('sleepForEveryDay', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('workoutForEveryDay', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('stepsForEveryDay', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('dailyStepsGoal', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('targetStepsGoal', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dailyWaterGoal', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('targetWaterGoal', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('dailySleepGoal', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('targetSleepGoal', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('dailyWorkoutGoal', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('targetWorkoutGoal', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name='Goal_userId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='Goal_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('Goal_userId_key'), 'Goal', ['userId'], unique=True)
    op.create_index(op.f('Goal_userId_date_idx'), 'Goal', ['userId', 'date'], unique=False)
    op.create_table('LoginHistory',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('streakId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('loginDate', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('noticeShown', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['streakId'], ['Streak.id'], name=op.f('LoginHistory_streakId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('LoginHistory_pkey'))
    )
    op.create_index(op.f('LoginHistory_streakId_loginDate_idx'), 'LoginHistory', ['streakId', 'loginDate'], unique=False)
    op.create_table('Streak',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('currentStreak', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('longestStreak', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('lastLogin', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('startDate', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Streak_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Streak_pkey'))
    )
    op.create_index(op.f('Streak_userId_lastLogin_idx'), 'Streak', ['userId', 'lastLogin'], unique=False)
    op.create_index(op.f('Streak_userId_key'), 'Streak', ['userId'], unique=True)
    op.create_table('CalculatorLog',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('logId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('calculatorType', postgresql.ENUM('BodyMassIndex', 'BasalMetabolicRate', 'BloodAlcoholConcentration', 'BodyFatPercentage', 'BodyType', 'BodyWaterVolume', 'CalorieBurn', 'DailyWaterIntake', 'HealthyBloodPressure', 'HealthyBloodVolume', 'LeanBodyMass', 'SleepDebt', 'TotalDailyEnergyExpenditure', 'WeightGainLoss', 'Unknown', name='CalculatorType'), server_default=sa.text('\'Unknown\'::"CalculatorType"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('result', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('bloodPressure', postgresql.ENUM('low', 'normal', 'elevated', 'hypertensionStage1', 'hypertensionStage2', 'severeHypertension', name='BloodPressureType'), autoincrement=False, nullable=True),
    sa.Column('bodyType', postgresql.ENUM('hourglass', 'bottomHourglass', 'topHourglass', 'spoon', 'triangle', 'invertedTriangle', 'rectangle', 'undefined', name='BodyType'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('CalculatorLog_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('CalculatorLog_pkey'))
    )
    op.create_index(op.f('CalculatorLog_userId_calculatorType_createdAt_idx'), 'CalculatorLog', ['userId', 'calculatorType', 'createdAt'], unique=False)
    op.create_index(op.f('CalculatorLog_logId_key'), 'CalculatorLog', ['logId'], unique=True)
    op.create_table('Reminder',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('goal', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('everyDay', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('reminderId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('days', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Reminder_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Reminder_pkey'))
    )
    op.create_table('UserFood',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('foodId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('mealId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['foodId'], ['Food.foodId'], name=op.f('UserFood_foodId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['mealId'], ['Meal.mealId'], name=op.f('UserFood_mealId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('UserFood_pkey'))
    )
    op.create_index(op.f('UserFood_userId_foodId_idx'), 'UserFood', ['userId', 'foodId'], unique=False)
    op.create_table('RecipeBookmark',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['recipeId'], ['Recipe.recipeId'], name=op.f('RecipeBookmark_recipeId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('RecipeBookmark_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('RecipeBookmark_pkey'))
    )
    op.create_table('PlanMeal',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('detailsid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mealPlanId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('day', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('mealType', postgresql.ENUM('Breakfast', 'Lunch', 'Dinner', 'Snack', name='MealType'), server_default=sa.text('\'Breakfast\'::"MealType"'), autoincrement=False, nullable=False),
    sa.Column('mealId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('foodId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['detailsid'], ['MealPlanDetails.id'], name=op.f('PlanMeal_detailsid_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['foodId'], ['Food.foodId'], name=op.f('PlanMeal_foodId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ingredientId'], ['Ingredient.ingredientId'], name=op.f('PlanMeal_ingredientId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['mealId'], ['Meal.mealId'], name=op.f('PlanMeal_mealId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['recipeId'], ['Recipe.recipeId'], name=op.f('PlanMeal_recipeId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('PlanMeal_pkey'))
    )
    op.create_table('MealLog',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('foodId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('mealId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('Breakfast', 'Lunch', 'Dinner', 'Snack', name='MealType'), server_default=sa.text('\'Breakfast\'::"MealType"'), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['foodId'], ['Food.foodId'], name=op.f('MealLog_foodId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ingredientId'], ['Ingredient.ingredientId'], name=op.f('MealLog_ingredientId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['mealId'], ['Meal.mealId'], name=op.f('MealLog_mealId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['recipeId'], ['Recipe.recipeId'], name=op.f('MealLog_recipeId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('MealLog_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('MealLog_pkey'))
    )
    op.create_index(op.f('MealLog_userId_foodId_idx'), 'MealLog', ['userId', 'foodId'], unique=False)
    op.create_table('Meal',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mealId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=240), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('imageId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('coachId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['coachId'], ['Coach.coachId'], name=op.f('Meal_coachId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['imageId'], ['File.fileId'], name=op.f('Meal_imageId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Meal_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('Meal_pkey'))
    )
    op.create_index(op.f('Meal_mealId_name_idx'), 'Meal', ['mealId', 'name'], unique=False)
    op.create_index(op.f('Meal_mealId_key'), 'Meal', ['mealId'], unique=True)
    op.create_table('Subscription',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('plan', postgresql.ENUM('Free', 'Beginner', 'Pro', 'Elite', 'Unknown', name='SubscriptionPlan'), server_default=sa.text('\'Unknown\'::"SubscriptionPlan"'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Active', 'Expired', 'Cancelled', 'Upcoming', 'Unknown', name='SubscriptionStatus'), server_default=sa.text('\'Unknown\'::"SubscriptionStatus"'), autoincrement=False, nullable=False),
    sa.Column('paymentType', postgresql.ENUM('PhonePeUpi', 'GooglePayUpi', 'OtherUpi', 'Card', 'GooglePlay', 'AppleStore', 'PaytmWallet', 'PhonePeWallet', 'PaypalWallet', 'Unknown', 'PayU', name='PaymentType'), server_default=sa.text('\'Unknown\'::"PaymentType"'), autoincrement=False, nullable=False),
    sa.Column('paymentStatus', postgresql.ENUM('Pending', 'Success', 'Failed', 'Unknown', name='PaymentStatus'), server_default=sa.text('\'Unknown\'::"PaymentStatus"'), autoincrement=False, nullable=False),
    sa.Column('isTrial', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('startDate', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('endDate', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('paymentAmount', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('orderId', sa.VARCHAR(length=70), autoincrement=False, nullable=True),
    sa.Column('paymentCurrency', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('paymentCurrencySymbol', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('transactionId', sa.VARCHAR(length=70), autoincrement=False, nullable=True),
    sa.Column('discount', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('subscriptionId', sa.VARCHAR(length=70), autoincrement=False, nullable=False),
    sa.Column('repeatId', sa.VARCHAR(length=70), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Subscription_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Subscription_pkey'))
    )
    op.create_index(op.f('Subscription_subscriptionId_key'), 'Subscription', ['subscriptionId'], unique=True)
    op.create_table('Instructions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('header', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('instructionsList', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('Instructions_pkey'))
    )
    op.create_table('WorkoutGoalLog',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('goalId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['goalId'], ['Goal.id'], name=op.f('WorkoutGoalLog_goalId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('WorkoutGoalLog_pkey'))
    )
    op.create_index(op.f('WorkoutGoalLog_goalId_idx'), 'WorkoutGoalLog', ['goalId'], unique=False)
    op.create_table('RecipeIngredients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipeId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('serving', postgresql.ENUM('Cup', 'L', 'Gram', 'OZ', 'ML', 'unknown', name='ServingType'), server_default=sa.text('\'unknown\'::"ServingType"'), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['ingredientId'], ['Ingredient.ingredientId'], name=op.f('RecipeIngredients_ingredientId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['recipeId'], ['Recipe.recipeId'], name=op.f('RecipeIngredients_recipeId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('RecipeIngredients_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('RecipeIngredients_pkey'))
    )
    op.create_index(op.f('RecipeIngredients_id_key'), 'RecipeIngredients', ['id'], unique=True)
    op.create_table('CoachCertification',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('coachId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('issuedBy', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('issuedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('validTill', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('documentUrl', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('documentId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('PDF', 'Image', 'Unknown', name='DocumentType'), server_default=sa.text('\'Unknown\'::"DocumentType"'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['coachId'], ['Coach.coachId'], name=op.f('CoachCertification_coachId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('CoachCertification_pkey'))
    )
    op.create_table('Food',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Food_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=240), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('serving', postgresql.ENUM('Cup', 'L', 'Gram', 'OZ', 'ML', 'unknown', name='ServingType'), server_default=sa.text('\'unknown\'::"ServingType"'), autoincrement=False, nullable=False),
    sa.Column('calories', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('protein', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('carbs', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('fat', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('fiber', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('foodId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('isPublic', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('imageId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calcium', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('cholesterol', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('dietType', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('glucose', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('lactose', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('mangnesium', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('potassium', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('sodium', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('sugar', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('tasteType', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('aiGenerated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('coachId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['coachId'], ['Coach.coachId'], name='Food_coachId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['imageId'], ['File.fileId'], name='Food_imageId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name='Food_userId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Food_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('Food_foodId_name_idx'), 'Food', ['foodId', 'name'], unique=False)
    op.create_index(op.f('Food_foodId_key'), 'Food', ['foodId'], unique=True)
    op.create_table('Notification',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('StepReminder', 'StepMidDay', 'StepCompleted', 'StepMissed', 'Unknown', 'WorkoutCompleted', 'WorkoutMissed', 'WorkoutReminder', 'SleepReminder', 'SleepCompleted', 'WaterReminder', 'WaterCompleted', 'WaterMissed', name='NotificationType'), server_default=sa.text('\'Unknown\'::"NotificationType"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Notification_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('Notification_pkey'))
    )
    op.create_table('Mood',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('mood', postgresql.ENUM('Happy', 'Worried', 'Calm', 'Sad', 'Angry', 'Unknown', name='MoodType'), server_default=sa.text('\'Unknown\'::"MoodType"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('reason', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('otherReason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Mood_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Mood_pkey'))
    )
    op.create_table('RecentIngredients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('counts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['ingredientId'], ['Ingredient.ingredientId'], name=op.f('RecentIngredients_ingredientId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('RecentIngredients_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('RecentIngredients_pkey'))
    )
    op.create_index(op.f('RecentIngredients_userId_ingredientId_idx'), 'RecentIngredients', ['userId', 'ingredientId'], unique=False)
    op.create_table('Coach',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Coach_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('coachId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('experience', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('experienceLevel', postgresql.ENUM('Beginner', 'Intermediate', 'Advanced', name='ExperienceLevel'), server_default=sa.text('\'Beginner\'::"ExperienceLevel"'), autoincrement=False, nullable=False),
    sa.Column('about', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expertise', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('peopleCoached', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('availableTime', postgresql.ARRAY(postgresql.TIMESTAMP(timezone=True)), autoincrement=False, nullable=True),
    sa.Column('avilableDays', postgresql.ARRAY(sa.SMALLINT()), autoincrement=False, nullable=True),
    sa.Column('consultationFee', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('coverImageUrl', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('imageUrl', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isAvailable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('isCertified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('coverImageKey', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('imageKey', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Coach_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('Coach_coachId_key'), 'Coach', ['coachId'], unique=True)
    op.create_table('MyMealPlan',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('mealPlanId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('planEnd', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('planStart', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('currentWeek', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Active', 'Completed', 'Cancelled', name='PlanStatus'), server_default=sa.text('\'Active\'::"PlanStatus"'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mealPlanId'], ['MealPlan.mealPlanId'], name=op.f('MyMealPlan_mealPlanId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('MyMealPlan_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('MyMealPlan_pkey'))
    )
    op.create_index(op.f('MyMealPlan_userId_mealPlanId_idx'), 'MyMealPlan', ['userId', 'mealPlanId'], unique=False)
    op.create_table('MealPlanDetails',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mealPlanId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('days', postgresql.ARRAY(sa.INTEGER()), server_default=sa.text('ARRAY[]::integer[]'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['mealPlanId'], ['MealPlan.mealPlanId'], name=op.f('MealPlanDetails_mealPlanId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('MealPlanDetails_pkey'))
    )
    op.create_table('FoodIngredient',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('foodId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['foodId'], ['Food.foodId'], name=op.f('FoodIngredient_foodId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['ingredientId'], ['Ingredient.ingredientId'], name=op.f('FoodIngredient_ingredientId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('FoodIngredient_pkey'))
    )
    op.create_index(op.f('FoodIngredient_foodId_ingredientId_idx'), 'FoodIngredient', ['foodId', 'ingredientId'], unique=False)
    op.create_table('Account',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Account_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('uid', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('imageUrl', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider', postgresql.ENUM('email', 'google', 'apple', 'unknown', name='AuthProvider'), server_default=sa.text('\'unknown\'::"AuthProvider"'), autoincrement=False, nullable=False),
    sa.Column('activityLevel', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('connectedService', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weightType', postgresql.ENUM('Kgs', 'Lbs', 'Unknown', name='WeightType'), server_default=sa.text('\'Unknown\'::"WeightType"'), autoincrement=False, nullable=False),
    sa.Column('heightType', postgresql.ENUM('Feet', 'Centimeter', 'Unknown', name='HeightType'), server_default=sa.text('\'Unknown\'::"HeightType"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('imageKey', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Account_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('Account_uid_key'), 'Account', ['uid'], unique=True)
    op.create_index(op.f('Account_uid_idx'), 'Account', ['uid'], unique=False)
    op.create_index(op.f('Account_email_key'), 'Account', ['email'], unique=True)
    op.create_table('WeightTarget',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('targetId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('targetWeight', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('targetWeek', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('startedDate', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('weight', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('targetType', postgresql.ENUM('Gain', 'Loss', name='TargetType'), server_default=sa.text('\'Loss\'::"TargetType"'), autoincrement=False, nullable=False),
    sa.Column('currentWeight', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('unit', postgresql.ENUM('Kgs', 'Lbs', 'Unknown', name='WeightType'), server_default=sa.text('\'Unknown\'::"WeightType"'), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('WeightTarget_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('WeightTarget_pkey'))
    )
    op.create_index(op.f('WeightTarget_userId_targetId_idx'), 'WeightTarget', ['userId', 'targetId'], unique=False)
    op.create_index(op.f('WeightTarget_targetId_key'), 'WeightTarget', ['targetId'], unique=True)
    op.create_table('Device',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deviceId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('deviceToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('lastLogin', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('locale', sa.VARCHAR(length=6), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Device_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('Device_pkey'))
    )
    op.create_table('Ingredient',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=140), autoincrement=False, nullable=False),
    sa.Column('imageId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calories', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('protein', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('fibre', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('carbs', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('fat', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('ingredientId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('guessTracked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.REAL(), server_default=sa.text('2'), autoincrement=False, nullable=False),
    sa.Column('serving', postgresql.ENUM('Cup', 'L', 'Gram', 'OZ', 'ML', 'unknown', name='ServingType'), server_default=sa.text('\'unknown\'::"ServingType"'), autoincrement=False, nullable=False),
    sa.Column('aiGenerated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('calcium', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('cholesterol', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('cuisineType', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('dietType', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('glucose', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('lactose', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('mangnesium', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('potassium', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('sodium', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('sugar', sa.REAL(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('tasteType', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('coachId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('foodType', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('document_with_weights', postgresql.TSVECTOR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['coachId'], ['Coach.coachId'], name=op.f('Ingredient_coachId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['imageId'], ['File.fileId'], name=op.f('Ingredient_imageId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['userId'], ['Account.uid'], name=op.f('Ingredient_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('Ingredient_pkey'))
    )
    op.create_index(op.f('ingredient_tsvector_idx'), 'Ingredient', ['document_with_weights'], unique=False, postgresql_using='gin')
    op.create_index(op.f('Ingredient_name_ingredientId_idx'), 'Ingredient', ['name', 'ingredientId'], unique=False)
    op.create_index(op.f('Ingredient_ingredientId_key'), 'Ingredient', ['ingredientId'], unique=True)
    op.create_table('File',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fileId', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fileName', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('service', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('userId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('image', 'video', 'audio', 'document', name='FileType'), server_default=sa.text('\'image\'::"FileType"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('videoDuration', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('thumbnailId', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('File_pkey'))
    )
    op.create_index(op.f('File_fileId_key_userId_thumbnailId_idx'), 'File', ['fileId', 'key', 'userId', 'thumbnailId'], unique=False)
    op.create_index(op.f('File_fileId_key'), 'File', ['fileId'], unique=True)
    # ### end Alembic commands ###
